import boto3
import json
from botocore.exceptions import ClientError, NoCredentialsError
from typing import List, Dict, Optional

def get_sqs_messages(queue_url: str, 
                    max_messages: int = 1,
                    wait_time: int = 20,
                    visibility_timeout: int = 30,
                    region_name: str = None) -> List[Dict]:
    """
    Retrieve messages from an SQS queue from EC2 instance.
    
    Args:
        queue_url (str): The URL of the SQS queue
        max_messages (int): Maximum number of messages to retrieve (1-10)
        wait_time (int): Long polling wait time in seconds (0-20)
        visibility_timeout (int): How long message is hidden from other consumers
        region_name (str): AWS region (if None, uses instance metadata)
    
    Returns:
        List[Dict]: List of message dictionaries
    """
    try:
        # Create SQS client - will automatically use IAM role if running on EC2
        if region_name:
            sqs = boto3.client('sqs', region_name=region_name)
        else:
            # Let boto3 determine region from instance metadata
            sqs = boto3.client('sqs')
        
        # Receive messages from queue
        response = sqs.receive_message(
            QueueUrl=queue_url,
            MaxNumberOfMessages=min(max_messages, 10),  # AWS limit is 10
            WaitTimeSeconds=wait_time,  # Long polling
            VisibilityTimeoutSeconds=visibility_timeout,
            MessageAttributeNames=['All'],  # Get all message attributes
            AttributeNames=['All']  # Get all queue attributes
        )
        
        messages = response.get('Messages', [])
        
        if not messages:
            print("No messages available in the queue")
            return []
        
        print(f"Retrieved {len(messages)} message(s)")
        
        # Process messages
        processed_messages = []
        for message in messages:
            processed_message = {
                'message_id': message['MessageId'],
                'receipt_handle': message['ReceiptHandle'],
                'body': message['Body'],
                'attributes': message.get('Attributes', {}),
                'message_attributes': message.get('MessageAttributes', {})
            }
            
            # Try to parse JSON body if possible
            try:
                processed_message['parsed_body'] = json.loads(message['Body'])
            except json.JSONDecodeError:
                processed_message['parsed_body'] = None
            
            processed_messages.append(processed_message)
        
        return processed_messages
        
    except NoCredentialsError:
        print("Error: No AWS credentials found. Ensure EC2 instance has proper IAM role.")
        return []
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'QueueDoesNotExist':
            print(f"Error: Queue {queue_url} does not exist")
        elif error_code == 'AccessDenied':
            print("Error: Access denied. Check IAM permissions for SQS actions.")
        else:
            print(f"AWS Error: {error_code} - {e.response['Error']['Message']}")
        return []
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return []

def delete_sqs_message(queue_url: str, receipt_handle: str, region_name: str = None) -> bool:
    """
    Delete a message from SQS queue after processing.
    
    Args:
        queue_url (str): The URL of the SQS queue
        receipt_handle (str): Receipt handle from the received message
        region_name (str): AWS region
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        if region_name:
            sqs = boto3.client('sqs', region_name=region_name)
        else:
            sqs = boto3.client('sqs')
        
        sqs.delete_message(
            QueueUrl=queue_url,
            ReceiptHandle=receipt_handle
        )
        
        print("Message deleted successfully")
        return True
        
    except ClientError as e:
        print(f"Error deleting message: {e.response['Error']['Message']}")
        return False

# Example usage
if __name__ == "__main__":
    # Replace with your actual queue URL
    QUEUE_URL = "https://sqs.us-east-1.amazonaws.com/123456789012/my-queue"
    
    # Get messages
    messages = get_sqs_messages(
        queue_url=QUEUE_URL,
        max_messages=5,
        wait_time=10
    )
    
    # Process each message
    for message in messages:
        print(f"Processing message: {message['message_id']}")
        print(f"Body: {message['body']}")
        
        # Your message processing logic here
        # ...
        
        # Delete message after successful processing
        delete_sqs_message(QUEUE_URL, message['receipt_handle'])
